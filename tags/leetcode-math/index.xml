<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>leetcode-Math on My New Hugo Site</title><link>http://blog.evance.tw/tags/leetcode-math/</link><description>Recent content in leetcode-Math on My New Hugo Site</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Sat, 21 Sep 2019 01:00:00 +0800</lastBuildDate><atom:link href="http://blog.evance.tw/tags/leetcode-math/index.xml" rel="self" type="application/rss+xml"/><item><title>0013 Roman to Integer</title><link>http://blog.evance.tw/leetcode/0013-roman-to-integer/</link><pubDate>Sat, 21 Sep 2019 01:00:00 +0800</pubDate><guid>http://blog.evance.tw/leetcode/0013-roman-to-integer/</guid><description>
&lt;p>&lt;a href="https://leetcode.com/problems/roman-to-integer/">See Problem&lt;/a>&lt;/p>
&lt;h2 id="submission-detail">Submission Detail&lt;/h2>
&lt;p>Submitted: 2019/09/21&lt;/p>
&lt;p>Detail URL: &lt;a href="https://leetcode.com/submissions/detail/262885592/">https://leetcode.com/submissions/detail/262885592/&lt;/a>&lt;/p>
&lt;p>Runtime: 76 ms&lt;/p>
&lt;p>Runtime Rank: 99.63 %&lt;/p>
&lt;p>Memory Usage: 24.6 MB&lt;/p>
&lt;p>Memory Usage Rank: 20.00 %&lt;/p>
&lt;h2 id="problem-solving-mode-of-mind">Problem Solving Mode of Mind&lt;/h2>
&lt;h3 id="english">English&lt;/h3>
&lt;h3 id="繁體中文">繁體中文&lt;/h3>
&lt;h2 id="submitted-code">Submitted Code&lt;/h2>
&lt;p>Language: csharp&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Solution&lt;/span> {
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">readonly&lt;/span> Dictionary&amp;lt;&lt;span style="color:#66d9ef">char&lt;/span>, &lt;span style="color:#66d9ef">int&lt;/span>&amp;gt; romanNumeralsMapping = &lt;span style="color:#66d9ef">new&lt;/span> Dictionary&amp;lt;&lt;span style="color:#66d9ef">char&lt;/span>, &lt;span style="color:#66d9ef">int&lt;/span>&amp;gt;()
{
&lt;span style="color:#a6e22e"> [&amp;#39;I&amp;#39;]&lt;/span> = &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;span style="color:#a6e22e"> [&amp;#39;V&amp;#39;]&lt;/span> = &lt;span style="color:#ae81ff">5&lt;/span>,
&lt;span style="color:#a6e22e"> [&amp;#39;X&amp;#39;]&lt;/span> = &lt;span style="color:#ae81ff">10&lt;/span>,
&lt;span style="color:#a6e22e"> [&amp;#39;L&amp;#39;]&lt;/span> = &lt;span style="color:#ae81ff">50&lt;/span>,
&lt;span style="color:#a6e22e"> [&amp;#39;C&amp;#39;]&lt;/span> = &lt;span style="color:#ae81ff">100&lt;/span>,
&lt;span style="color:#a6e22e"> [&amp;#39;D&amp;#39;]&lt;/span> = &lt;span style="color:#ae81ff">500&lt;/span>,
&lt;span style="color:#a6e22e"> [&amp;#39;M&amp;#39;]&lt;/span> = &lt;span style="color:#ae81ff">1000&lt;/span>,
};
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> RomanToInt(&lt;span style="color:#66d9ef">string&lt;/span> s) {
&lt;span style="color:#75715e">//if (s.Length == 1)
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// return romanNumeralsMapping[s[0]];
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> result = &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">int&lt;/span> n1 = romanNumeralsMapping[s[&lt;span style="color:#ae81ff">0&lt;/span>]];
&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> i = &lt;span style="color:#ae81ff">1&lt;/span>; i &amp;lt; s.Length; i++)
{
&lt;span style="color:#75715e">//int n1 = romanNumeralsMapping[s[i - 1]];
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> n2 = romanNumeralsMapping[s[i]];
&lt;span style="color:#66d9ef">if&lt;/span> (n1 &amp;gt;= n2)
{
result += n1;
&lt;span style="color:#75715e">//if (i + 1 &amp;lt; s.Length)
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// i++;
&lt;/span>&lt;span style="color:#75715e">&lt;/span> }
&lt;span style="color:#66d9ef">else&lt;/span>
{
result -= n1;
}
n1 = n2;
}
result += romanNumeralsMapping[s[s.Length - &lt;span style="color:#ae81ff">1&lt;/span>]];
&lt;span style="color:#66d9ef">return&lt;/span> result;
}
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>0009 Palindrome Number</title><link>http://blog.evance.tw/leetcode/0009-palindrome-number/</link><pubDate>Sat, 21 Sep 2019 00:00:00 +0800</pubDate><guid>http://blog.evance.tw/leetcode/0009-palindrome-number/</guid><description>
&lt;p>&lt;a href="https://leetcode.com/problems/palindrome-number/">See Problem&lt;/a>&lt;/p>
&lt;h2 id="submission-detail">Submission Detail&lt;/h2>
&lt;p>Submitted: 2019/09/21&lt;/p>
&lt;p>Detail URL: &lt;a href="https://leetcode.com/submissions/detail/262639459/">https://leetcode.com/submissions/detail/262639459/&lt;/a>&lt;/p>
&lt;p>Runtime: 60 ms&lt;/p>
&lt;p>Runtime Rank: 90.12 %&lt;/p>
&lt;p>Memory Usage: 15 MB&lt;/p>
&lt;p>Memory Usage Rank: 20.00 %&lt;/p>
&lt;h2 id="problem-solving-mode-of-mind">Problem Solving Mode of Mind&lt;/h2>
&lt;h3 id="english">English&lt;/h3>
&lt;h3 id="繁體中文">繁體中文&lt;/h3>
&lt;h2 id="submitted-code">Submitted Code&lt;/h2>
&lt;p>Language: csharp&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Solution&lt;/span> {
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> IsPalindrome(&lt;span style="color:#66d9ef">int&lt;/span> x) {
&lt;span style="color:#66d9ef">if&lt;/span> (x &amp;lt; &lt;span style="color:#ae81ff">0&lt;/span> || (x % &lt;span style="color:#ae81ff">10&lt;/span> == &lt;span style="color:#ae81ff">0&lt;/span> &amp;amp;&amp;amp; x != &lt;span style="color:#ae81ff">0&lt;/span>))
{
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
}
&lt;span style="color:#66d9ef">else&lt;/span>
{
&lt;span style="color:#66d9ef">int&lt;/span> ox = x;
&lt;span style="color:#66d9ef">int&lt;/span> rev = &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">while&lt;/span> (ox &amp;gt; rev)
{
&lt;span style="color:#66d9ef">int&lt;/span> pop = ox % &lt;span style="color:#ae81ff">10&lt;/span>;
ox /= &lt;span style="color:#ae81ff">10&lt;/span>;
rev = rev * &lt;span style="color:#ae81ff">10&lt;/span> + pop;
}
&lt;span style="color:#66d9ef">return&lt;/span> (ox == rev || ox == rev / &lt;span style="color:#ae81ff">10&lt;/span>);
}
}
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>#0007 Reverse Integer</title><link>http://blog.evance.tw/leetcode/0007-reverse-integer/</link><pubDate>Tue, 17 Sep 2019 01:00:00 +0800</pubDate><guid>http://blog.evance.tw/leetcode/0007-reverse-integer/</guid><description>
&lt;p>&lt;a href="https://leetcode.com/problems/reverse-integer/">See Problem&lt;/a>&lt;/p>
&lt;h2 id="submission-detail">Submission Detail&lt;/h2>
&lt;p>Submitted: 2019/09/17&lt;/p>
&lt;p>Detail URL: &lt;a href="https://leetcode.com/submissions/detail/261626373/">https://leetcode.com/submissions/detail/261626373/&lt;/a>&lt;/p>
&lt;p>Runtime: 56 ms&lt;/p>
&lt;p>Runtime Rank: 10.91 %&lt;/p>
&lt;p>Memory Usage: 14.2 MB&lt;/p>
&lt;p>Memory Usage Rank:&lt;/p>
&lt;h2 id="problem-solving-mode-of-mind">Problem Solving Mode of Mind&lt;/h2>
&lt;h3 id="english">English&lt;/h3>
&lt;h3 id="繁體中文">繁體中文&lt;/h3>
&lt;h2 id="submitted-code">Submitted Code&lt;/h2>
&lt;p>Language: csharp&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Solution&lt;/span> {
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> Reverse(&lt;span style="color:#66d9ef">int&lt;/span> x) {
&lt;span style="color:#66d9ef">var&lt;/span> source = x.ToString().Replace(&lt;span style="color:#e6db74">&amp;#34;-&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">var&lt;/span> tempResult = &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> i = source.Length - &lt;span style="color:#ae81ff">1&lt;/span>; i &amp;gt;= &lt;span style="color:#ae81ff">0&lt;/span>; i--)
{
tempResult += source[i];
}
Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;tempResult: &amp;#34;&lt;/span> + tempResult);
&lt;span style="color:#75715e">//var result = Convert.ToInt32(tempResult);
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>.TryParse(tempResult, &lt;span style="color:#66d9ef">out&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> result);
&lt;span style="color:#66d9ef">return&lt;/span> (x &amp;lt; &lt;span style="color:#ae81ff">0&lt;/span> ? -result : result);
}
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>0002 Add Two Numbers</title><link>http://blog.evance.tw/leetcode/0002-add-two-numbers/</link><pubDate>Tue, 17 Sep 2019 00:00:00 +0800</pubDate><guid>http://blog.evance.tw/leetcode/0002-add-two-numbers/</guid><description>
&lt;p>&lt;a href="https://leetcode.com/problems/add-two-numbers/">See Problem&lt;/a>&lt;/p>
&lt;h2 id="submission-detail">Submission Detail&lt;/h2>
&lt;p>Submitted: 2019/09/17&lt;/p>
&lt;p>Detail URL: &lt;a href="https://leetcode.com/submissions/detail/261618438/">https://leetcode.com/submissions/detail/261618438/&lt;/a>&lt;/p>
&lt;p>Runtime: 152 ms&lt;/p>
&lt;p>Runtime Rank:&lt;/p>
&lt;p>Memory Usage: 26.7 MB&lt;/p>
&lt;p>Memory Usage Rank:&lt;/p>
&lt;h2 id="problem-solving-mode-of-mind">Problem Solving Mode of Mind&lt;/h2>
&lt;h3 id="english">English&lt;/h3>
&lt;h3 id="繁體中文">繁體中文&lt;/h3>
&lt;h2 id="submitted-code">Submitted Code&lt;/h2>
&lt;p>Language: csharp&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#75715e">// Definition for singly-linked list.
&lt;/span>&lt;span style="color:#75715e">//public class ListNode {
&lt;/span>&lt;span style="color:#75715e">// public int val;
&lt;/span>&lt;span style="color:#75715e">// public ListNode next;
&lt;/span>&lt;span style="color:#75715e">// public ListNode(int x) { val = x; }
&lt;/span>&lt;span style="color:#75715e">//}
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Solution&lt;/span> {
&lt;span style="color:#66d9ef">public&lt;/span> ListNode AddTwoNumbers(ListNode l1, ListNode l2) {
&lt;span style="color:#66d9ef">var&lt;/span> l1Num = RecoverNumber(l1);
&lt;span style="color:#66d9ef">var&lt;/span> l2Num = RecoverNumber(l2);
&lt;span style="color:#66d9ef">var&lt;/span> resultString = (l1Num + l2Num).ToString();
Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;resultString: &amp;#34;&lt;/span> + resultString);
ListNode ln = &lt;span style="color:#66d9ef">new&lt;/span> ListNode(Convert.ToInt32(resultString[resultString.Length - &lt;span style="color:#ae81ff">1&lt;/span>].ToString()));
&lt;span style="color:#75715e">//ListNode ln = null;
&lt;/span>&lt;span style="color:#75715e">&lt;/span> ListNode tempListNode = ln;
&lt;span style="color:#66d9ef">if&lt;/span> (resultString.Length &amp;gt; &lt;span style="color:#ae81ff">1&lt;/span>)
{
&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> i = resultString.Length - &lt;span style="color:#ae81ff">2&lt;/span>; i &amp;gt;= &lt;span style="color:#ae81ff">0&lt;/span>; i--)
{
&lt;span style="color:#66d9ef">var&lt;/span> currcntListNode = &lt;span style="color:#66d9ef">new&lt;/span> ListNode(Convert.ToInt32(resultString[i].ToString()));
tempListNode.next = currcntListNode;
tempListNode = tempListNode.next;
}
}
Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;valid: &amp;#34;&lt;/span> + RecoverNumber(ln).ToString());
&lt;span style="color:#66d9ef">return&lt;/span> ln;
&lt;span style="color:#75715e">//ListNode ln = new ListNode(Convert.ToInt32(resultString[0].ToString()));
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//ListNode tempListNode = ln;
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//if (resultString.Length &amp;gt; 1)
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//{
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// for (var i = 1; i &amp;lt; resultString.Length; i++)
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// {
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// var currcntListNode = new ListNode(Convert.ToInt32(resultString[i].ToString()));
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// tempListNode.next = currcntListNode;
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// tempListNode = tempListNode.next;
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// }
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//}
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//Console.WriteLine(&amp;#34;valid: &amp;#34; + RecoverNumber(ln).ToString());
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//return ln;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">//ListNode lastListNode = null;
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//for (var i = resultString.Length - 1; i &amp;gt;= 0; i--)
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//{
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// var currcntListNode = new ListNode(Convert.ToInt32(resultString[i].ToString()));
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// if (lastListNode != null)
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// {
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// //lastListNode.next = currcntListNode;
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// currcntListNode.next = lastListNode;
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// }
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// lastListNode = currcntListNode;
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//}
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//Console.WriteLine(&amp;#34;valid: &amp;#34; + RecoverNumber(lastListNode).ToString());
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//return lastListNode;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">//ListNode ln = null;
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//foreach (var c in resultString)
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//{
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// //ListNode newListNode = null;
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// BuildListNodes()
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//}
&lt;/span>&lt;span style="color:#75715e">&lt;/span> }
&lt;span style="color:#66d9ef">private&lt;/span> BigInteger RecoverNumber(ListNode ln)
{
&lt;span style="color:#66d9ef">string&lt;/span> tempString = &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>;
tempString += ln.val.ToString();
&lt;span style="color:#66d9ef">while&lt;/span> (ln.next != &lt;span style="color:#66d9ef">null&lt;/span>)
{
ln = ln.next;
tempString += ln.val.ToString();
}
Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;RecoverNumber: &amp;#34;&lt;/span> + tempString);
&lt;span style="color:#66d9ef">var&lt;/span> resultString = ReverseString(tempString);
&lt;span style="color:#75715e">//return Convert.ToDecimal(resultString);
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> BigInteger.Parse(resultString);
}
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> ReverseString(&lt;span style="color:#66d9ef">string&lt;/span> source)
{
&lt;span style="color:#66d9ef">string&lt;/span> result = &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> i = source.Length - &lt;span style="color:#ae81ff">1&lt;/span>; i &amp;gt;= &lt;span style="color:#ae81ff">0&lt;/span>; i--)
{
result += source[i].ToString();
}
Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;ReverseString: &amp;#34;&lt;/span> + result);
&lt;span style="color:#66d9ef">return&lt;/span> result;
}
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> BuildListNodes(&lt;span style="color:#66d9ef">ref&lt;/span> ListNode originListNode, &lt;span style="color:#66d9ef">int&lt;/span> nextVal)
{
&lt;span style="color:#66d9ef">if&lt;/span> (originListNode == &lt;span style="color:#66d9ef">null&lt;/span>)
{
originListNode = &lt;span style="color:#66d9ef">new&lt;/span> ListNode(nextVal);
}
&lt;span style="color:#66d9ef">else&lt;/span>
{
originListNode.next = &lt;span style="color:#66d9ef">new&lt;/span> ListNode(nextVal);
}
}
}
&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>