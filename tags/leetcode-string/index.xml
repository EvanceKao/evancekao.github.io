<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>leetcode-String on My New Hugo Site</title><link>http://blog.evance.tw/tags/leetcode-string/</link><description>Recent content in leetcode-String on My New Hugo Site</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Mon, 23 Sep 2019 00:00:00 +0800</lastBuildDate><atom:link href="http://blog.evance.tw/tags/leetcode-string/index.xml" rel="self" type="application/rss+xml"/><item><title>0058 Length of Last Word</title><link>http://blog.evance.tw/leetcode/0058-length-of-last-word/</link><pubDate>Mon, 23 Sep 2019 00:00:00 +0800</pubDate><guid>http://blog.evance.tw/leetcode/0058-length-of-last-word/</guid><description>
&lt;p>&lt;a href="https://leetcode.com/problems/length-of-last-word/">See Problem&lt;/a>&lt;/p>
&lt;h2 id="submission-detail">Submission Detail&lt;/h2>
&lt;p>Submitted: 2019/09/23&lt;/p>
&lt;p>Detail URL: &lt;a href="https://leetcode.com/submissions/detail/263543250/">https://leetcode.com/submissions/detail/263543250/&lt;/a>&lt;/p>
&lt;p>Runtime: 64 ms&lt;/p>
&lt;p>Runtime Rank: 100.00 %&lt;/p>
&lt;p>Memory Usage: 20.9 MB&lt;/p>
&lt;p>Memory Usage Rank:&lt;/p>
&lt;h2 id="problem-solving-mode-of-mind">Problem Solving Mode of Mind&lt;/h2>
&lt;h3 id="english">English&lt;/h3>
&lt;h3 id="繁體中文">繁體中文&lt;/h3>
&lt;h2 id="submitted-code">Submitted Code&lt;/h2>
&lt;p>Language: csharp&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Solution&lt;/span> {
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> LengthOfLastWord(&lt;span style="color:#66d9ef">string&lt;/span> s) {
&lt;span style="color:#66d9ef">if&lt;/span> (s == &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">var&lt;/span> r = &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> i = s.Length - &lt;span style="color:#ae81ff">1&lt;/span>; i &amp;gt;= &lt;span style="color:#ae81ff">0&lt;/span>; i--)
{
&lt;span style="color:#66d9ef">if&lt;/span> (s[i] != &lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>)
{
r++;
}
&lt;span style="color:#66d9ef">else&lt;/span>
{
&lt;span style="color:#66d9ef">if&lt;/span> (r != &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;span style="color:#66d9ef">break&lt;/span>;
}
}
&lt;span style="color:#66d9ef">return&lt;/span> r;
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;hr></description></item><item><title>0038 Count and Say</title><link>http://blog.evance.tw/leetcode/0038-count-and-say/</link><pubDate>Sun, 22 Sep 2019 07:00:00 +0800</pubDate><guid>http://blog.evance.tw/leetcode/0038-count-and-say/</guid><description>
&lt;p>&lt;a href="https://leetcode.com/problems/count-and-say/">See Problem&lt;/a>&lt;/p>
&lt;h2 id="submission-detail">Submission Detail&lt;/h2>
&lt;p>Submitted: 2019/09/22&lt;/p>
&lt;p>Detail URL: &lt;a href="https://leetcode.com/submissions/detail/263140304/">https://leetcode.com/submissions/detail/263140304/&lt;/a>&lt;/p>
&lt;p>Runtime: 80 ms&lt;/p>
&lt;p>Runtime Rank: 96.99 %&lt;/p>
&lt;p>Memory Usage: 28.4 MB&lt;/p>
&lt;p>Memory Usage Rank:&lt;/p>
&lt;h2 id="problem-solving-mode-of-mind">Problem Solving Mode of Mind&lt;/h2>
&lt;h3 id="english">English&lt;/h3>
&lt;h3 id="繁體中文">繁體中文&lt;/h3>
&lt;h2 id="submitted-code">Submitted Code&lt;/h2>
&lt;p>Language: csharp&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Solution&lt;/span> {
&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">readonly&lt;/span> Dictionary&amp;lt;&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#66d9ef">string&lt;/span>&amp;gt; dict = BuildMapping();
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> CountAndSay(&lt;span style="color:#66d9ef">int&lt;/span> n) {
&lt;span style="color:#66d9ef">return&lt;/span> dict[n];
}
&lt;span style="color:#66d9ef">static&lt;/span> Dictionary&amp;lt;&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#66d9ef">string&lt;/span>&amp;gt; BuildMapping(&lt;span style="color:#66d9ef">int&lt;/span> end = &lt;span style="color:#ae81ff">30&lt;/span>)
{
&lt;span style="color:#66d9ef">var&lt;/span> mapping = &lt;span style="color:#66d9ef">new&lt;/span> Dictionary&amp;lt;&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#66d9ef">string&lt;/span>&amp;gt;()
{
&lt;span style="color:#a6e22e"> [1]&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>
};
&lt;span style="color:#66d9ef">var&lt;/span> previous = &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> i = &lt;span style="color:#ae81ff">2&lt;/span>; i &amp;lt;= end; i++)
{
&lt;span style="color:#66d9ef">var&lt;/span> result = &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">var&lt;/span> count = &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;span style="color:#66d9ef">var&lt;/span> p = previous[&lt;span style="color:#ae81ff">0&lt;/span>];
&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> j = &lt;span style="color:#ae81ff">1&lt;/span>; j &amp;lt; previous.Length; j++)
{
&lt;span style="color:#66d9ef">if&lt;/span> (p == previous[j])
{
count++;
}
&lt;span style="color:#66d9ef">else&lt;/span>
{
result += &lt;span style="color:#e6db74">$&amp;#34;{count.ToString()}{p}&amp;#34;&lt;/span>;
count = &lt;span style="color:#ae81ff">1&lt;/span>;
}
p = previous[j];
}
result += &lt;span style="color:#e6db74">$&amp;#34;{count.ToString()}{previous[previous.Length - 1]}&amp;#34;&lt;/span>;
Console.WriteLine(&lt;span style="color:#e6db74">$&amp;#34;i: {i}, r: {result}&amp;#34;&lt;/span>);
mapping[i] = result;
previous = result;
}
&lt;span style="color:#66d9ef">return&lt;/span> mapping;
}
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>0028 Implement strStr()</title><link>http://blog.evance.tw/leetcode/0028-implement-strstr/</link><pubDate>Sun, 22 Sep 2019 05:00:00 +0800</pubDate><guid>http://blog.evance.tw/leetcode/0028-implement-strstr/</guid><description>
&lt;p>&lt;a href="https://leetcode.com/problems/implement-strstr/">See Problem&lt;/a>&lt;/p>
&lt;h2 id="submission-detail">Submission Detail&lt;/h2>
&lt;p>Submitted: 2019/09/22&lt;/p>
&lt;p>Detail URL: &lt;a href="https://leetcode.com/submissions/detail/263138164/">https://leetcode.com/submissions/detail/263138164/&lt;/a>&lt;/p>
&lt;p>Runtime: 1724 ms&lt;/p>
&lt;p>Runtime Rank:&lt;/p>
&lt;p>Memory Usage: 21.6 MB&lt;/p>
&lt;p>Memory Usage Rank:&lt;/p>
&lt;h2 id="problem-solving-mode-of-mind">Problem Solving Mode of Mind&lt;/h2>
&lt;h3 id="english">English&lt;/h3>
&lt;h3 id="繁體中文">繁體中文&lt;/h3>
&lt;h2 id="submitted-code">Submitted Code&lt;/h2>
&lt;p>Language: csharp&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Solution&lt;/span> {
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> StrStr(&lt;span style="color:#66d9ef">string&lt;/span> haystack, &lt;span style="color:#66d9ef">string&lt;/span> needle) {
&lt;span style="color:#66d9ef">if&lt;/span> (needle != &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>)
{
&lt;span style="color:#66d9ef">if&lt;/span> (haystack == &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> -&lt;span style="color:#ae81ff">1&lt;/span>;
&lt;span style="color:#66d9ef">var&lt;/span> nl = needle.Length;
&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> i = &lt;span style="color:#ae81ff">0&lt;/span>; i &amp;lt; haystack.Length; i++)
{
&lt;span style="color:#66d9ef">if&lt;/span> (haystack[i] == needle[&lt;span style="color:#ae81ff">0&lt;/span>])
{
&lt;span style="color:#66d9ef">if&lt;/span> (nl != &lt;span style="color:#ae81ff">1&lt;/span>)
{
&lt;span style="color:#66d9ef">bool&lt;/span> find = &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> j = &lt;span style="color:#ae81ff">1&lt;/span>; j &amp;lt; nl; j++)
{
&lt;span style="color:#66d9ef">if&lt;/span> (i + j &amp;gt;= haystack.Length || haystack[i + j] != needle[j])
{
find = &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;span style="color:#66d9ef">break&lt;/span>;
}
}
&lt;span style="color:#66d9ef">if&lt;/span> (find)
&lt;span style="color:#66d9ef">return&lt;/span> i;
}
&lt;span style="color:#66d9ef">else&lt;/span>
{
&lt;span style="color:#66d9ef">return&lt;/span> i;
}
}
}
&lt;span style="color:#66d9ef">return&lt;/span> -&lt;span style="color:#ae81ff">1&lt;/span>;
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
}
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>0014 Longest Common Prefix</title><link>http://blog.evance.tw/leetcode/0014-longest-common-prefix/</link><pubDate>Sun, 22 Sep 2019 00:00:00 +0800</pubDate><guid>http://blog.evance.tw/leetcode/0014-longest-common-prefix/</guid><description>
&lt;p>&lt;a href="https://leetcode.com/problems/longest-common-prefix/">See Problem&lt;/a>&lt;/p>
&lt;h2 id="submission-detail">Submission Detail&lt;/h2>
&lt;p>Submitted: 2019/09/22&lt;/p>
&lt;p>Detail URL: &lt;a href="https://leetcode.com/submissions/detail/262895500/">https://leetcode.com/submissions/detail/262895500/&lt;/a>&lt;/p>
&lt;p>Runtime: 84 ms&lt;/p>
&lt;p>Runtime Rank: 100 %&lt;/p>
&lt;p>Memory Usage: 23.6 MB&lt;/p>
&lt;p>Memory Usage Rank:&lt;/p>
&lt;h2 id="problem-solving-mode-of-mind">Problem Solving Mode of Mind&lt;/h2>
&lt;h3 id="english">English&lt;/h3>
&lt;h3 id="繁體中文">繁體中文&lt;/h3>
&lt;h2 id="submitted-code">Submitted Code&lt;/h2>
&lt;p>Language: csharp&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Solution&lt;/span> {
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> LongestCommonPrefix(&lt;span style="color:#66d9ef">string&lt;/span>[] strs) {
&lt;span style="color:#66d9ef">if&lt;/span> (strs.Length == &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">if&lt;/span> (strs.Length == &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> strs[&lt;span style="color:#ae81ff">0&lt;/span>];
&lt;span style="color:#66d9ef">string&lt;/span> result = &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">int&lt;/span> i = &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">bool&lt;/span> getShortestLength = &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;span style="color:#66d9ef">while&lt;/span> (!getShortestLength)
{
&lt;span style="color:#66d9ef">bool&lt;/span> allSame = &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;span style="color:#66d9ef">char&lt;/span> previous = &lt;span style="color:#e6db74">&amp;#39;1&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">foreach&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> str &lt;span style="color:#66d9ef">in&lt;/span> strs)
{
&lt;span style="color:#66d9ef">if&lt;/span> (i &amp;gt; str.Length - &lt;span style="color:#ae81ff">1&lt;/span>)
{
getShortestLength = &lt;span style="color:#66d9ef">true&lt;/span>;
allSame = &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;span style="color:#66d9ef">break&lt;/span>;
}
&lt;span style="color:#66d9ef">if&lt;/span> (previous == &lt;span style="color:#e6db74">&amp;#39;1&amp;#39;&lt;/span>)
{
previous = str[i];
&lt;span style="color:#66d9ef">continue&lt;/span>;
}
&lt;span style="color:#66d9ef">if&lt;/span> (previous != str[i])
{
getShortestLength = &lt;span style="color:#66d9ef">true&lt;/span>;
allSame = &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;span style="color:#66d9ef">break&lt;/span>;
}
}
i++;
&lt;span style="color:#66d9ef">if&lt;/span> (allSame)
result += previous;
}
&lt;span style="color:#66d9ef">return&lt;/span> (result != &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span> ? result : &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>);
}
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>0020 Valid Parentheses</title><link>http://blog.evance.tw/leetcode/0020-valid-parentheses/</link><pubDate>Sun, 22 Sep 2019 00:00:00 +0800</pubDate><guid>http://blog.evance.tw/leetcode/0020-valid-parentheses/</guid><description>
&lt;p>&lt;a href="https://leetcode.com/problems/valid-parentheses/">See Problem&lt;/a>&lt;/p>
&lt;h2 id="submission-detail">Submission Detail&lt;/h2>
&lt;p>Submitted: 2019/09/22&lt;/p>
&lt;p>Detail URL: &lt;a href="https://leetcode.com/submissions/detail/262902309/">https://leetcode.com/submissions/detail/262902309/&lt;/a>&lt;/p>
&lt;p>Runtime: 72 ms&lt;/p>
&lt;p>Runtime Rank: 95.02 %&lt;/p>
&lt;p>Memory Usage: 21 MB&lt;/p>
&lt;p>Memory Usage Rank:&lt;/p>
&lt;h2 id="problem-solving-mode-of-mind">Problem Solving Mode of Mind&lt;/h2>
&lt;h3 id="english">English&lt;/h3>
&lt;h3 id="繁體中文">繁體中文&lt;/h3>
&lt;h2 id="submitted-code">Submitted Code&lt;/h2>
&lt;p>Language: csharp&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Solution&lt;/span> {
&lt;span style="color:#66d9ef">static&lt;/span> Dictionary&amp;lt;&lt;span style="color:#66d9ef">char&lt;/span>, &lt;span style="color:#66d9ef">char&lt;/span>&amp;gt; Mapping = &lt;span style="color:#66d9ef">new&lt;/span> Dictionary&amp;lt;&lt;span style="color:#66d9ef">char&lt;/span>, &lt;span style="color:#66d9ef">char&lt;/span>&amp;gt;()
{
&lt;span style="color:#a6e22e"> [&amp;#39;(&amp;#39;]&lt;/span> = &lt;span style="color:#e6db74">&amp;#39;)&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e"> [&amp;#39;[&amp;#39;]&lt;/span> = &lt;span style="color:#e6db74">&amp;#39;]&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e"> [&amp;#39;{&amp;#39;]&lt;/span> = &lt;span style="color:#e6db74">&amp;#39;}&amp;#39;&lt;/span>,
};
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> IsValid(&lt;span style="color:#66d9ef">string&lt;/span> s) {
&lt;span style="color:#66d9ef">if&lt;/span> (s == &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;span style="color:#66d9ef">var&lt;/span> list = &lt;span style="color:#66d9ef">new&lt;/span> List&amp;lt;&lt;span style="color:#66d9ef">char&lt;/span>&amp;gt;();
&lt;span style="color:#66d9ef">foreach&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> c &lt;span style="color:#66d9ef">in&lt;/span> s)
{
&lt;span style="color:#66d9ef">if&lt;/span> (Mapping.ContainsKey(c))
{
list.Add(c);
}
&lt;span style="color:#66d9ef">if&lt;/span> (c == &lt;span style="color:#e6db74">&amp;#39;)&amp;#39;&lt;/span> || c == &lt;span style="color:#e6db74">&amp;#39;]&amp;#39;&lt;/span> || c == &lt;span style="color:#e6db74">&amp;#39;}&amp;#39;&lt;/span>)
{
&lt;span style="color:#66d9ef">if&lt;/span> (list.Count == &lt;span style="color:#ae81ff">0&lt;/span> || c != Mapping[list[list.Count - &lt;span style="color:#ae81ff">1&lt;/span>]])
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
list.RemoveAt(list.Count - &lt;span style="color:#ae81ff">1&lt;/span>);
}
}
&lt;span style="color:#66d9ef">return&lt;/span> list.Count == &lt;span style="color:#ae81ff">0&lt;/span>;
}
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>0013 Roman to Integer</title><link>http://blog.evance.tw/leetcode/0013-roman-to-integer/</link><pubDate>Sat, 21 Sep 2019 01:00:00 +0800</pubDate><guid>http://blog.evance.tw/leetcode/0013-roman-to-integer/</guid><description>
&lt;p>&lt;a href="https://leetcode.com/problems/roman-to-integer/">See Problem&lt;/a>&lt;/p>
&lt;h2 id="submission-detail">Submission Detail&lt;/h2>
&lt;p>Submitted: 2019/09/21&lt;/p>
&lt;p>Detail URL: &lt;a href="https://leetcode.com/submissions/detail/262885592/">https://leetcode.com/submissions/detail/262885592/&lt;/a>&lt;/p>
&lt;p>Runtime: 76 ms&lt;/p>
&lt;p>Runtime Rank: 99.63 %&lt;/p>
&lt;p>Memory Usage: 24.6 MB&lt;/p>
&lt;p>Memory Usage Rank: 20.00 %&lt;/p>
&lt;h2 id="problem-solving-mode-of-mind">Problem Solving Mode of Mind&lt;/h2>
&lt;h3 id="english">English&lt;/h3>
&lt;h3 id="繁體中文">繁體中文&lt;/h3>
&lt;h2 id="submitted-code">Submitted Code&lt;/h2>
&lt;p>Language: csharp&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Solution&lt;/span> {
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">readonly&lt;/span> Dictionary&amp;lt;&lt;span style="color:#66d9ef">char&lt;/span>, &lt;span style="color:#66d9ef">int&lt;/span>&amp;gt; romanNumeralsMapping = &lt;span style="color:#66d9ef">new&lt;/span> Dictionary&amp;lt;&lt;span style="color:#66d9ef">char&lt;/span>, &lt;span style="color:#66d9ef">int&lt;/span>&amp;gt;()
{
&lt;span style="color:#a6e22e"> [&amp;#39;I&amp;#39;]&lt;/span> = &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;span style="color:#a6e22e"> [&amp;#39;V&amp;#39;]&lt;/span> = &lt;span style="color:#ae81ff">5&lt;/span>,
&lt;span style="color:#a6e22e"> [&amp;#39;X&amp;#39;]&lt;/span> = &lt;span style="color:#ae81ff">10&lt;/span>,
&lt;span style="color:#a6e22e"> [&amp;#39;L&amp;#39;]&lt;/span> = &lt;span style="color:#ae81ff">50&lt;/span>,
&lt;span style="color:#a6e22e"> [&amp;#39;C&amp;#39;]&lt;/span> = &lt;span style="color:#ae81ff">100&lt;/span>,
&lt;span style="color:#a6e22e"> [&amp;#39;D&amp;#39;]&lt;/span> = &lt;span style="color:#ae81ff">500&lt;/span>,
&lt;span style="color:#a6e22e"> [&amp;#39;M&amp;#39;]&lt;/span> = &lt;span style="color:#ae81ff">1000&lt;/span>,
};
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> RomanToInt(&lt;span style="color:#66d9ef">string&lt;/span> s) {
&lt;span style="color:#75715e">//if (s.Length == 1)
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// return romanNumeralsMapping[s[0]];
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> result = &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">int&lt;/span> n1 = romanNumeralsMapping[s[&lt;span style="color:#ae81ff">0&lt;/span>]];
&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> i = &lt;span style="color:#ae81ff">1&lt;/span>; i &amp;lt; s.Length; i++)
{
&lt;span style="color:#75715e">//int n1 = romanNumeralsMapping[s[i - 1]];
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> n2 = romanNumeralsMapping[s[i]];
&lt;span style="color:#66d9ef">if&lt;/span> (n1 &amp;gt;= n2)
{
result += n1;
&lt;span style="color:#75715e">//if (i + 1 &amp;lt; s.Length)
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// i++;
&lt;/span>&lt;span style="color:#75715e">&lt;/span> }
&lt;span style="color:#66d9ef">else&lt;/span>
{
result -= n1;
}
n1 = n2;
}
result += romanNumeralsMapping[s[s.Length - &lt;span style="color:#ae81ff">1&lt;/span>]];
&lt;span style="color:#66d9ef">return&lt;/span> result;
}
}
&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>